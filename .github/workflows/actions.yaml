name:  Test and Build Store App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: store

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-django pytest-cov

    - name: Set environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=*" >> $GITHUB_ENV
        echo "GOOGLE_OAUTH2_CLIENT_ID=test_client_id" >> $GITHUB_ENV
        echo "GOOGLE_OAUTH2_CLIENT_SECRET=test_client_secret" >> $GITHUB_ENV
        echo "AFRICAS_TALKING_SENDER_ID=test_sender_id" >> $GITHUB_ENV
        echo "AFRICAS_TALKING_API_KEY=test_api_key" >> $GITHUB_ENV
        echo "AFRICAS_TALKING_USERNAME=test_username" >> $GITHUB_ENV
        echo "ADMIN_EMAIL=test_admin_email" >> $GITHUB_ENV
        echo "EMAIL_HOST_USER=test_email_host_user" >> $GITHUB_ENV
        echo "EMAIL_HOST_PASSWORD=test_email_host_password" >> $GITHUB_ENV
        

    - name: Run migrations
      run: |
        python manage.py migrate

    - name: Run tests with coverage
      run: |
        coverage run --source='.' manage.py test
        coverage report --show-missing
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Run linting (flake8)
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run security check (bandit)
      run: |
        pip install bandit
        bandit -r . -x */tests/*,*/venv/*,*/migrations/*

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest